import ktrainfrom ktrain import textMODEL_NAME = 'bert-base-uncased'relations = ['antithesis', 'attribution', 'background', 'circumstance', 'comparison',             'concession', 'conclusion', 'condition', 'contrast', 'elaboration',             'enablement', 'evaluation', 'evidence', 'explanation', 'interpretation',             'joint', 'justify', 'list', 'means', 'motivation', 'non-volitional-cause',             'non-volitional-result', 'otherwise', 'parenthetical', 'purpose',             'restatement', 'same-unit', 'sequence', 'solutionhood', 'summary',             'volitional-cause', 'volitional-result']t = text.Transformer(MODEL_NAME, maxlen=128, class_names=relations)p = ktrain.load_predictor('models/rst_relations_classifier_bert_3ep')def classify(left, right):    pair = (left, right)    return p.predict(pair)def classify_proba(left, right):    pair = (left, right)    return p.predict_proba(pair)def identify_relations(segmented_text):    relations = []    p = 0    while p < len(segmented_text):        sentences = segmented_text[p]        s = 0        while s < len(sentences):            segments = sentences[s]            i = 0            while i < len(segments):                if i < len(segments) - 1:                    left = ' '.join([token['token'] for token in segments[i]])                    right = ' '.join([token['token']                                      for token in segments[i+1]])                    relations.append(classify(left, right))                i += 1            if s < len(sentences) - 1:                left = ' '.join([token['token']                                 for segment in sentences[s] for token in segment])                right = ' '.join(                    [token['token'] for segment in sentences[s+1] for token in segment])                relations.append(classify(left, right))            s += 1        if p < len(segmented_text) - 1:            left = ' '.join([token['token'] for sentence in segmented_text[p]                             for segment in sentence for token in segment])            right = ' '.join([token['token'] for sentence in segmented_text[p+1]                              for segment in sentence for token in segment])            relations.append(classify(left, right))        p += 1    return relations